using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NPlot;
using System.Drawing;


namespace 覆盤
{
    public class Kline
    {
        public List<int[]> TX_1mk = null;
        public NPlot.Windows.PlotSurface2D PS = null;
        public NPlot.CandlePlot CP = new CandlePlot();
        public int MK = 0;
        public int KLine_num = 0;
        //public TXF.MK_data TXF_1MK;
        public VerticalLine lineCrossX = null;// = new VerticalLine(10);
        public HorizontalLine lineCrossY = null;// = new HorizontalLine(10);

        public NPlot.PointPlot pointPlot = new NPlot.PointPlot();
        public NPlot.LinePlot linePlot = new NPlot.LinePlot();
        public bool autoRefresh = true;
        public object Lock = new object();

        //public ref TXF_MK refTXF();
        public Kline(NPlot.Windows.PlotSurface2D nPS, int nMK, int nKLine_num)
        {
            PS = nPS;
            MK = nMK;
            KLine_num = nKLine_num;
            InitKLinePS();
        }

        public void InitKLinePS()
        {

            PS.AutoScaleAutoGeneratedAxes = true;
            PS.AutoScaleTitle = false;
            PS.DateTimeToolTip = true;
            PS.Legend = null;
            PS.LegendZOrder = -1;
            //PS.Location = new System.Drawing.Point(0, 0);
            PS.Name = "costPS";
            PS.RightMenu = null;
            PS.Padding = 1;

            //滑鼠tooltips 時間+價格
            PS.ShowCoordinates = true;
            PS.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.Default;
            PS.TabIndex = 2;
            PS.Title = "123";
            PS.TitleFont = new System.Drawing.Font("Arial", 14F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel);

            //////////////////////
            PS.Clear();
            Grid mygrid = new Grid();
            mygrid.HorizontalGridType = Grid.GridType.Fine;
            mygrid.VerticalGridType = Grid.GridType.Fine;
            PS.Add(mygrid);

            InitCandle();
            PS.Add(CP);
            PS.Refresh();
        }
        public void InitCandle()
        {
            /////////蠟燭圖///////////
            CP.BullishColor = Color.Red;
            CP.BearishColor = Color.Green;
            CP.Style = CandlePlot.Styles.Filled;

            int[] opens = { 1, 2, 1, 2, 1, 3, 50 };
            int[] closes = { 2, 2, 2, 1, 2, 1, 99 };
            int[] lows = { 1, 1, 1, 1, 1, 1, 40 };
            int[] highs = { 3, 2, 3, 3, 3, 4, 110 };
            int[] times = { 100, 200, 300, 400, 500, 600, 700 };

            CP.CloseData = closes;
            CP.OpenData = opens;
            CP.LowData = lows;
            CP.HighData = highs;
            CP.AbscissaData = times;
            CP.Color = Color.Gray;

            //PS.Add(linePlot);
            //PS.Add(pointPlot);
            PS.AddInteraction(new NPlot.Windows.PlotSurface2D.Interactions.HorizontalDrag());
            PS.AddInteraction(new NPlot.Windows.PlotSurface2D.Interactions.VerticalDrag());
            PS.AddInteraction(new NPlot.Windows.PlotSurface2D.Interactions.AxisDrag(true));
        }

        public void refreshK(List<TXF.MK_data.MK> mk)
        {
            if (autoRefresh == false)
                return;
 
            List<int[]> TX = new List<int[]>();

            int i, Highest = 0, Lowest = int.MaxValue;
            for (i = 0; i < 5; i++)
                TX.Add(new int[KLine_num]);

            for (i = 0; i < 300; i++) {
                if (mk.Count >= i + 1)
                {
                    Highest = Math.Max(Highest, Convert.ToInt32(mk[i].high));
                    Lowest = Math.Min(Lowest, Convert.ToInt32(mk[i].low));
                    TX[0][i] = Convert.ToInt32(mk[i].open);
                    TX[1][i] = Convert.ToInt32(mk[i].high);
                    TX[2][i] = Convert.ToInt32(mk[i].low);
                    TX[3][i] = Convert.ToInt32(mk[i].close);
                    
                }
                TX[4][i] = i;
            }
            CP.OpenData = TX[0];// opens;
            CP.HighData = TX[1];//highs;
            CP.LowData = TX[2];//lows;
            CP.CloseData = TX[3];//closes;
            CP.AbscissaData = TX[4];// times;
            //PS.Add(CP);
            PS.XAxis1.WorldMin = 0;
            PS.XAxis1.WorldMax = 300;
            PS.YAxis1.WorldMin = Lowest;
            PS.YAxis1.WorldMax = Highest;

            PS.Refresh();
        }
    }
}
